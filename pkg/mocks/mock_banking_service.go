// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
	entities "github.com/twonegatives/coinsph_challenge/pkg/entities"
	reflect "reflect"
)

// MockBankingService is a mock of BankingService interface
type MockBankingService struct {
	ctrl     *gomock.Controller
	recorder *MockBankingServiceMockRecorder
}

// MockBankingServiceMockRecorder is the mock recorder for MockBankingService
type MockBankingServiceMockRecorder struct {
	mock *MockBankingService
}

// NewMockBankingService creates a new mock instance
func NewMockBankingService(ctrl *gomock.Controller) *MockBankingService {
	mock := &MockBankingService{ctrl: ctrl}
	mock.recorder = &MockBankingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBankingService) EXPECT() *MockBankingServiceMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method
func (m *MockBankingService) CreateAccount(ctx context.Context, accountName string) (entities.Account, error) {
	ret := m.ctrl.Call(m, "CreateAccount", ctx, accountName)
	ret0, _ := ret[0].(entities.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount
func (mr *MockBankingServiceMockRecorder) CreateAccount(ctx, accountName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockBankingService)(nil).CreateAccount), ctx, accountName)
}

// GetAccountsList mocks base method
func (m *MockBankingService) GetAccountsList(ctx context.Context) ([]entities.Account, error) {
	ret := m.ctrl.Call(m, "GetAccountsList", ctx)
	ret0, _ := ret[0].([]entities.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountsList indicates an expected call of GetAccountsList
func (mr *MockBankingServiceMockRecorder) GetAccountsList(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountsList", reflect.TypeOf((*MockBankingService)(nil).GetAccountsList), ctx)
}

// GetPaymentsList mocks base method
func (m *MockBankingService) GetPaymentsList(ctx context.Context) ([]entities.Payment, error) {
	ret := m.ctrl.Call(m, "GetPaymentsList", ctx)
	ret0, _ := ret[0].([]entities.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPaymentsList indicates an expected call of GetPaymentsList
func (mr *MockBankingServiceMockRecorder) GetPaymentsList(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentsList", reflect.TypeOf((*MockBankingService)(nil).GetPaymentsList), ctx)
}

// SendPayment mocks base method
func (m *MockBankingService) SendPayment(ctx context.Context, from, to entities.Account, amount decimal.Decimal) error {
	ret := m.ctrl.Call(m, "SendPayment", ctx, from, to, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendPayment indicates an expected call of SendPayment
func (mr *MockBankingServiceMockRecorder) SendPayment(ctx, from, to, amount interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPayment", reflect.TypeOf((*MockBankingService)(nil).SendPayment), ctx, from, to, amount)
}
